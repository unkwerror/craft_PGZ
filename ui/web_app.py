# ui/web_app.py

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –ª–µ–∂–∏—Ç –ø–∞–ø–∫–∞ core) –≤ sys.path
sys.path.append(str(Path(__file__).resolve().parent.parent))

import streamlit as st
from core.search_parser import ZakupkiSearchParser
from core.tender_parser import ZakupkiTenderParser
from core.services.excel_service import ExcelService

st.set_page_config(page_title="–ì–æ—Å–∑–∞–∫—É–ø–∫–∏ –ü–∞—Ä—Å–µ—Ä", layout="wide")

st.title("üîé –ü–∞—Ä—Å–µ—Ä –≥–æ—Å–∑–∞–∫—É–ø–æ–∫")

# 1. –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞", "—à–∫–∞—Ñ—ã –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ")
limit = st.slider("–ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤", 5, 50, 10)

if st.button("–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã"):
    with ZakupkiSearchParser(headless=True) as parser:
        st.write("–û—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç...")
        parser.open_site()
        parser.set_filters()
        parser.search_query(query)
        results = parser.parse_orders(limit=limit)

    if not results:
        st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–∫–∞–∑–æ–≤")
        selected_numbers = []
        for r in results:
            if st.checkbox(f"{r.number} | {r.title} | {r.price} | {r.customer}", key=r.number):
                selected_numbers.append(r.number)

        if selected_numbers:
            st.write("–í—ã–±—Ä–∞–Ω—ã –∑–∞–∫–∞–∑—ã:", selected_numbers)

            if st.button("–°–ø–∞—Ä—Å–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"):
                excel_service = ExcelService()
                for num in selected_numbers:
                    with ZakupkiTenderParser(headless=True) as tparser:
                        st.write(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ {num} ...")
                        tparser.load_page(num)
                        tender = tparser.parse_tender_card()
                        tparser.save_html(num)
                        tparser.download_all_documents(num, tender.documents)
                        path = excel_service.save_tender(tender)
                        st.success(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}")
