# web/streamlit_app.py - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
import streamlit as st
import asyncio
import logging
from decimal import Decimal
from typing import List, Dict, Any
from datetime import datetime
import pandas as pd
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
ROOT_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(ROOT_DIR))

try:
    from application.services.economics_service import EconomicsService
    from application.services.search_service import SearchService
    from domain.value_objects.economics import ProjectConfig, TeamRole, ProjectType, DEFAULT_TEAM_TEMPLATES
    from domain.value_objects.search import SearchCriteria
    from infrastructure.parsers.http_parser import HttpTenderParser
    from infrastructure.cache.simple_cache import SimpleCache
    from infrastructure.database.repositories.memory_repository import MemoryTenderRepository
    from core.config import get_settings
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    st.info("üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ __init__.py —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
    st.stop()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Tender Analyzer 2.0",
    page_icon="üìä", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #e6e9ef;
        margin-bottom: 1rem;
    }
    
    .profit-positive {
        color: #00C851;
        font-weight: bold;
    }
    
    .profit-negative {
        color: #ff4444;
        font-weight: bold;
    }
    
    .risk-low { color: #00C851; }
    .risk-medium { color: #ffbb33; }
    .risk-high { color: #ff4444; }
    .risk-critical { color: #CC0000; }
    
    .tender-card {
        border: 1px solid #e6e9ef;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    
    .tender-title {
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    
    .tender-info {
        color: #666;
        font-size: 0.9rem;
    }
</style>
""", unsafe_allow_html=True)

class TenderAnalyzerApp:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit"""
    
    def __init__(self):
        try:
            self.settings = get_settings()
            self._init_services()
            self._init_session_state()
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            st.stop()
    
    def _init_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            cache = SimpleCache()
            repository = MemoryTenderRepository()
            parser = HttpTenderParser()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
            self.search_service = SearchService(parser, cache, repository)
            self.economics_service = EconomicsService()
            
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            raise
    
    def _init_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if 'search_results' not in st.session_state:
            st.session_state.search_results = []
        
        if 'selected_tenders' not in st.session_state:
            st.session_state.selected_tenders = []
        
        if 'economics_results' not in st.session_state:
            st.session_state.economics_results = {}
        
        if 'last_search_query' not in st.session_state:
            st.session_state.last_search_query = ""
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        st.title("üè¢ Tender Analyzer 2.0")
        st.markdown("*–ê–Ω–∞–ª–∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ zakupki.gov.ru*")
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        with st.sidebar:
            st.header("üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            page = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                ["üîç –ü–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤", "üí∞ –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
            if st.session_state.search_results:
                st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                st.metric("–ù–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤", len(st.session_state.search_results))
                st.metric("–í—ã–±—Ä–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", len(st.session_state.selected_tenders))
                st.metric("–†–∞—Å—á–µ—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", len(st.session_state.economics_results))
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
        if page == "üîç –ü–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤":
            self._render_search_page()
        elif page == "üí∞ –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏":
            self._render_economics_page()
        elif page == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
            self._render_analytics_page()
        elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            self._render_settings_page()
    
    def _render_search_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        st.header("üîç –ü–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–∞ zakupki.gov.ru")
        
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            search_query = st.text_input(
                "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
                value=st.session_state.last_search_query,
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏",
                help="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤"
            )
        
        with col2:
            search_limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", 5, 50, 10)
        
        with col3:
            use_real_parser = st.checkbox("–†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥", value=True, help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å zakupki.gov.ru")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        with st.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"):
            col4, col5 = st.columns(2)
            
            with col4:
                price_from = st.number_input("–¶–µ–Ω–∞ –æ—Ç (—Ä—É–±.):", min_value=0, value=0)
                date_from = st.date_input("–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç:", value=None)
            
            with col5:
                price_to = st.number_input("–¶–µ–Ω–∞ –¥–æ (—Ä—É–±.):", min_value=0, value=0)
                date_to = st.date_input("–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–æ:", value=None)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        if st.button("üîç –ù–∞–π—Ç–∏ —Ç–µ–Ω–¥–µ—Ä—ã", type="primary"):
            if search_query.strip():
                st.session_state.last_search_query = search_query
                filters = {}
                if price_from > 0:
                    filters['price_from'] = price_from
                if price_to > 0:
                    filters['price_to'] = price_to
                if date_from:
                    filters['date_from'] = date_from.strftime('%d.%m.%Y')
                if date_to:
                    filters['date_to'] = date_to.strftime('%d.%m.%Y')
                
                self._perform_search(search_query, search_limit, filters, use_real_parser)
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        self._display_search_results()
    
    def _perform_search(self, query: str, limit: int, filters: Dict, use_real_parser: bool):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
        with st.spinner("üîç –ü–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–∞ zakupki.gov.ru..."):
            try:
                if use_real_parser:
                    # –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ HTTP –ø–∞—Ä—Å–µ—Ä
                    search_criteria = SearchCriteria(query=query, limit=limit, filters=filters)
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                    results = asyncio.run(self._async_search(search_criteria))
                    
                    if results:
                        st.session_state.search_results = results
                        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–∞ zakupki.gov.ru")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
                        type_counts = {}
                        for result in results:
                            tender_type = result.get('tender_type', 'unknown')
                            type_counts[tender_type] = type_counts.get(tender_type, 0) + 1
                        
                        st.info(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: " + " | ".join([f"{k}: {v}" for k, v in type_counts.items()]))
                    else:
                        st.warning("‚ö†Ô∏è –¢–µ–Ω–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
                else:
                    # Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    self._mock_search(query, limit)
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
                logger.error(f"Search error: {e}")
                
                # Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ
                st.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                self._mock_search(query, limit)
    
    async def _async_search(self, criteria: SearchCriteria):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å"""
        try:
            results = await self.search_service.search_tenders(criteria, use_cache=True)
            return [result.to_dict() for result in results]
        except Exception as e:
            logger.error(f"Async search error: {e}")
            raise
    
    def _mock_search(self, query: str, limit: int):
        """Mock –ø–æ–∏—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import random
        
        mock_results = []
        templates = [
            f"{query} - –ø—Ä–æ–µ–∫—Ç –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
            f"–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –∏ {query}",
            f"–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ {query}",
            f"–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ {query}",
            f"–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ {query}"
        ]
        
        for i in range(min(limit, 15)):
            template = random.choice(templates)
            mock_results.append({
                'reg_number': f'0162200011825{3000 + i:04d}',
                'title': f'{template} ‚Ññ{i+1}',
                'customer': f'–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –≥. {["–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"][i % 4]}',
                'initial_price': random.randint(1000000, 50000000),
                'tender_type': random.choice(['44-fz', '223-fz']),
                'status': 'active',
                'deadline': datetime.now(),
                'source_url': f'https://zakupki.gov.ru/epz/order/notice/ea44/view/common-info.html?regNumber=0162200011825{3000+i:04d}'
            })
        
        st.session_state.search_results = mock_results
        st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(mock_results)} —Ç–µ–Ω–¥–µ—Ä–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    
    def _display_search_results(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        if not st.session_state.search_results:
            st.info("üîç –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
        
        st.markdown(f"### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({len(st.session_state.search_results)} —Ç–µ–Ω–¥–µ—Ä–æ–≤)")
        
        selected_numbers = []
        
        for tender in st.session_state.search_results:
            reg_number = tender.get('reg_number', '')
            title = tender.get('title', '')
            customer = tender.get('customer', '')
            price = tender.get('initial_price', 0)
            tender_type = tender.get('tender_type', '')
            status = tender.get('status', '')
            source_url = tender.get('source_url', '')
            
            # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–Ω–¥–µ—Ä–∞
            with st.container():
                col1, col2 = st.columns([5, 1])
                
                with col1:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ —Å—Å—ã–ª–∫–∞
                    if source_url:
                        st.markdown(f"**[{title}]({source_url})**")
                    else:
                        st.markdown(f"**{title}**")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ
                    st.markdown(f"üìã **‚Ññ {reg_number}** | üè¢ {customer}")
                    st.markdown(f"üí∞ **{price:,.2f} ‚ÇΩ** | üìú {tender_type.upper()} | üîÑ {status}")
                
                with col2:
                    if st.checkbox("–í—ã–±—Ä–∞—Ç—å", key=f"select_{reg_number}", help="–í—ã–±—Ä–∞—Ç—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"):
                        selected_numbers.append(reg_number)
                
                st.divider()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã
        if selected_numbers:
            st.session_state.selected_tenders = [
                t for t in st.session_state.search_results 
                if t.get('reg_number') in selected_numbers
            ]
            
            st.success(f"üìù –í—ã–±—Ä–∞–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(selected_numbers)}")
    
    def _render_economics_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
        st.header("üí∞ –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
        
        if not st.session_state.selected_tenders:
            st.info("üìù –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–∏—Å–∫–∞")
            
            # –î–æ–±–∞–≤–∏–º demo —Ç–µ–Ω–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if st.button("üéØ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–Ω–¥–µ—Ä"):
                st.session_state.selected_tenders = [{
                    'reg_number': '0162200011825DEMO',
                    'title': '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ (DEMO)',
                    'customer': '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≥. –ú–æ—Å–∫–≤–∞',
                    'initial_price': 5000000,
                    'tender_type': '44-fz',
                    'status': 'active'
                }]
                st.rerun()
            return
        
        # –í—ã–±–æ—Ä —Ç–µ–Ω–¥–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        tender_options = [
            f"{t.get('reg_number', 'N/A')} ‚Äî {t.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:80]}..." 
            for t in st.session_state.selected_tenders
        ]
        
        selected_tender_idx = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:",
            range(len(tender_options)),
            format_func=lambda i: tender_options[i]
        )
        
        if selected_tender_idx is not None:
            selected_tender = st.session_state.selected_tenders[selected_tender_idx]
            self._render_economics_calculator(selected_tender)
    
    def _render_economics_calculator(self, tender: Dict[str, Any]):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞"""
        st.subheader(f"üìä –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ
        with st.expander("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–µ", expanded=True):
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**–ù–æ–º–µ—Ä:** {tender.get('reg_number', 'N/A')}")
                st.write(f"**–ó–∞–∫–∞–∑—á–∏–∫:** {tender.get('customer', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            with col2:
                st.write(f"**–¶–µ–Ω–∞:** {tender.get('initial_price', 0):,.2f} ‚ÇΩ")
                st.write(f"**–¢–∏–ø:** {tender.get('tender_type', 'N/A').upper()}")
            
            st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {tender.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("### üë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
            
            # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
            template_names = list(DEFAULT_TEAM_TEMPLATES.keys())
            selected_template = st.selectbox(
                "–®–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥—ã:",
                template_names,
                help="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–æ–º–∞–Ω–¥—ã"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã
            team_config = DEFAULT_TEAM_TEMPLATES[selected_template].copy()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            edited_team = self._edit_team_config(team_config)
        
        with col2:
            st.markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
            
            project_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:", tender.get('title', '–ü—Ä–æ–µ–∫—Ç')[:50])
            duration_months = st.slider("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–µ—Å—è—Ü—ã):", 1, 24, 6)
            
            project_type_options = [t.value for t in ProjectType]
            project_type = st.selectbox(
                "–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞:",
                project_type_options,
                format_func=lambda x: {
                    'architecture': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
                    'engineering': '–ò–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥',
                    'landscaping': '–ë–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                    'complex': '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π',
                    'restoration': '–†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è',
                    'infrastructure': '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
                }.get(x, x)
            )
            
            # –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            st.markdown("#### üíº –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
            office_rent = st.number_input("–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞ (–º–µ—Å—è—Ü):", value=50000)
            software = st.number_input("–ü–û –∏ –ª–∏—Ü–µ–Ω–∑–∏–∏:", value=30000)
            utilities = st.number_input("–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:", value=20000)
            
            # –ù–∞–ª–æ–≥–∏
            st.markdown("#### üìä –ù–∞–ª–æ–≥–∏ –∏ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è")
            income_tax = st.slider("–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å (%):", 0, 30, 20) / 100
            social_tax = st.slider("–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–Ω–æ—Å—ã (%):", 0, 50, 30) / 100
        
        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        if st.button("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏–∫—É", type="primary"):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
                config = ProjectConfig(
                    project_name=project_name,
                    total_amount=Decimal(str(tender.get('initial_price', 0))),
                    duration_months=duration_months,
                    project_type=ProjectType(project_type),
                    team=edited_team,
                    overhead_costs={
                        "office_rent": Decimal(str(office_rent * duration_months)),
                        "software": Decimal(str(software)),
                        "utilities": Decimal(str(utilities * duration_months))
                    },
                    taxes={
                        "income_tax": income_tax,
                        "social": social_tax
                    }
                )
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
                result = self.economics_service.calculate_project_economics(
                    Decimal(str(tender.get('initial_price', 0))), config
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                st.session_state.economics_results[tender.get('reg_number', 'unknown')] = result
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._display_economics_results(result)
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}")
                logger.error(f"Economics calculation error: {e}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ debug —Ä–µ–∂–∏–º–µ
                if self.settings.debug:
                    st.exception(e)
    
    def _edit_team_config(self, team_config: Dict[str, TeamRole]) -> Dict[str, TeamRole]:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
        edited_team = {}
        
        st.markdown("**–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:**")
        
        total_percentage = 0
        
        for role_name, role in team_config.items():
            with st.expander(f"üë§ {role_name}", expanded=True):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    percentage = st.slider(
                        f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ (%)",
                        0.0, 50.0, role.percentage * 100,
                        key=f"perc_{role_name}",
                        help=f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {role.percentage * 100:.1f}%"
                    ) / 100
                
                with col2:
                    hourly_rate = st.number_input(
                        "–°—Ç–∞–≤–∫–∞/—á–∞—Å (‚ÇΩ)",
                        value=role.hourly_rate or 2000,
                        key=f"rate_{role_name}",
                        min_value=500,
                        max_value=10000
                    )
                
                edited_team[role_name] = TeamRole(
                    name=role_name,
                    percentage=percentage,
                    hourly_rate=hourly_rate,
                    hours_per_month=role.hours_per_month or 80
                )
                
                total_percentage += percentage
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
        total_percentage_display = total_percentage * 100
        
        if total_percentage_display > 100:
            st.error(f"‚ö†Ô∏è –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã: {total_percentage_display:.1f}% (–ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%)")
        elif total_percentage_display < 50:
            st.warning(f"‚ö†Ô∏è –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã: {total_percentage_display:.1f}% (—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ)")
        else:
            st.success(f"‚úÖ –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã: {total_percentage_display:.1f}%")
        
        return edited_team
    
    def _display_economics_results(self, result):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
        st.markdown("---")
        st.markdown("### üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            profit_color = "üü¢" if result.net_profit > 0 else "üî¥"
            st.metric(
                "üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å", 
                f"{result.net_profit:,.0f} ‚ÇΩ",
                help=f"–û—Ü–µ–Ω–∫–∞: {result.get_profit_grade()}"
            )
            st.markdown(f"{profit_color} **{result.get_profit_grade()}**")
        
        with col2:
            st.metric("üìä –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏", f"{result.profit_margin:.1f}%")
        
        with col3:
            st.metric("üìà ROI", f"{result.roi:.1f}%")
        
        with col4:
            risk_emoji = {"low": "üü¢", "medium": "üü°", "high": "üü†", "critical": "üî¥"}
            risk_color = risk_emoji.get(result.risk_level.value, "üü°")
            st.metric("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", f"{result.risk_level.value.upper()}")
            st.markdown(f"{risk_color} **–û—Ü–µ–Ω–∫–∞: {result.risk_score:.1f}/1.0**")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç
        col5, col6 = st.columns(2)
        
        with col5:
            st.markdown("#### üíº –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç")
            
            team_data = []
            for role, amount in result.team_breakdown.items():
                team_data.append({
                    '–†–æ–ª—å': role,
                    '–°—É–º–º–∞ (‚ÇΩ)': f"{amount:,.0f}",
                    '–î–æ–ª—è (%)': f"{(amount/result.total_revenue*100):.1f}%"
                })
            
            team_df = pd.DataFrame(team_data)
            st.dataframe(team_df, use_container_width=True, hide_index=True)
        
        with col6:
            st.markdown("#### üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç")
            
            costs_breakdown = {
                '–ö–æ–º–∞–Ω–¥–∞': float(result.team_costs),
                '–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã': float(result.overhead_costs),
                '–ù–∞–ª–æ–≥–∏': float(result.tax_costs)
            }
            
            # –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞—Ç—Ä–∞—Ç
            for category, amount in costs_breakdown.items():
                percentage = (amount / float(result.total_costs)) * 100 if result.total_costs > 0 else 0
                st.write(f"**{category}:** {amount:,.0f} ‚ÇΩ ({percentage:.1f}%)")
        
        # –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        if result.risk_factors:
            st.markdown("#### ‚ö†Ô∏è –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞")
            for factor in result.risk_factors:
                st.warning(f"‚Ä¢ {factor}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º
        st.markdown("#### üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º")
        market_data = result.market_comparison
        
        col7, col8, col9 = st.columns(3)
        
        with col7:
            st.metric(
                "–ù–∞—à–∞ –º–∞—Ä–∂–∞", 
                f"{result.profit_margin:.1f}%",
                f"{market_data.get('profit_margin_diff', 0):+.1f}% –∫ —Ä—ã–Ω–∫—É"
            )
        
        with col8:
            st.metric(
                "–°—Ä–µ–¥–Ω—è—è –ø–æ —Ä—ã–Ω–∫—É",
                f"{market_data.get('market_avg_profit_margin', 0):.1f}%"
            )
        
        with col9:
            position = market_data.get('market_position', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            position_emoji = {
                '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ —Ä—ã–Ω–∫–∞': 'üöÄ',
                '–í—ã—à–µ —Ä—ã–Ω–∫–∞': 'üìà',
                '–ù–∞ —É—Ä–æ–≤–Ω–µ —Ä—ã–Ω–∫–∞': '‚û°Ô∏è',
                '–ù–∏–∂–µ —Ä—ã–Ω–∫–∞': 'üìâ',
                '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞': '‚¨áÔ∏è'
            }
            st.markdown(f"**–ü–æ–∑–∏—Ü–∏—è:** {position_emoji.get(position, '‚ùì')} {position}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.markdown("#### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        if result.net_profit > 0:
            if result.profit_margin >= 20:
                st.success("üéØ **–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!** –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—á–∞—Å—Ç–∏–µ")
            elif result.profit_margin >= 10:
                st.info("üëç **–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–µ–∫—Ç.** –£—á–∞—Å—Ç–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤")
            else:
                st.warning("‚ö†Ô∏è **–ü—Ä–æ–µ–∫—Ç —Å –Ω–∏–∑–∫–æ–π –º–∞—Ä–∂–æ–π.** –¢—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞—Ç—Ä–∞—Ç")
        else:
            st.error("‚ùå **–£–±—ã—Ç–æ—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç.** –£—á–∞—Å—Ç–∏–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–µ–∑ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —É—Å–ª–æ–≤–∏–π")
    
    def _render_analytics_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤")
        
        if st.session_state.economics_results:
            st.markdown("### üìà –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            analytics_data = []
            for reg_number, result in st.session_state.economics_results.items():
                analytics_data.append({
                    '–ù–æ–º–µ—Ä —Ç–µ–Ω–¥–µ—Ä–∞': reg_number,
                    '–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (‚ÇΩ)': f"{result.net_profit:,.0f}",
                    '–ú–∞—Ä–∂–∞ (%)': f"{result.profit_margin:.1f}",
                    'ROI (%)': f"{result.roi:.1f}",
                    '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': result.risk_level.value.upper(),
                    '–û—Ü–µ–Ω–∫–∞': result.get_profit_grade()
                })
            
            if analytics_data:
                df = pd.DataFrame(analytics_data)
                st.dataframe(df, use_container_width=True, hide_index=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    profitable_count = sum(1 for _, result in st.session_state.economics_results.items() if result.net_profit > 0)
                    st.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", profitable_count)
                
                with col2:
                    avg_margin = sum(result.profit_margin for _, result in st.session_state.economics_results.items()) / len(st.session_state.economics_results)
                    st.metric("–°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞", f"{avg_margin:.1f}%")
                
                with col3:
                    high_risk_count = sum(1 for _, result in st.session_state.economics_results.items() if result.risk_level.value in ['high', 'critical'])
                    st.metric("–í—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö", high_risk_count)
        else:
            st.info("üìù –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —ç–∫–æ–Ω–æ–º–∏–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
            if st.session_state.search_results:
                st.markdown("### üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞")
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç–µ–Ω–¥–µ—Ä–æ–≤
                type_counts = {}
                total_value = 0
                
                for tender in st.session_state.search_results:
                    tender_type = tender.get('tender_type', 'unknown')
                    price = tender.get('initial_price', 0)
                    
                    type_counts[tender_type] = type_counts.get(tender_type, 0) + 1
                    total_value += price
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:**")
                    for tender_type, count in type_counts.items():
                        st.write(f"‚Ä¢ {tender_type.upper()}: {count} —Ç–µ–Ω–¥–µ—Ä–æ–≤")
                
                with col2:
                    st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_value:,.0f} ‚ÇΩ")
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_value/len(st.session_state.search_results):,.0f} ‚ÇΩ")
    
    def _render_settings_page(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞")
            
            st.checkbox("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", value=self.settings.debug, disabled=True, help="–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ .env —Ñ–∞–π–ª")
            st.selectbox("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", ["INFO", "DEBUG", "WARNING", "ERROR"], disabled=True)
            
            st.number_input("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫):", value=30, disabled=True)
            st.number_input("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫):", value=1.0, disabled=True)
            
            st.markdown("### üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏")
            
            st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (—á–µ–ª.):", value=10, min_value=1, max_value=20, disabled=True)
            st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–µ—Å.):", value=24, min_value=1, max_value=60, disabled=True)
        
        with col2:
            st.markdown("### üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
            
            st.info(f"**–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:** 2.0.0")
            st.info(f"**–ù–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤:** {len(st.session_state.search_results)}")
            st.info(f"**–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞—Å—á–µ—Ç–æ–≤:** {len(st.session_state.economics_results)}")
            
            st.markdown("### üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
            
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"):
                st.session_state.search_results = []
                st.session_state.selected_tenders = []
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω—ã")
            
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏"):
                st.session_state.economics_results = {}
                st.success("–†–∞—Å—á–µ—Ç—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏ –æ—á–∏—â–µ–Ω—ã")
            
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"):
                st.session_state.search_results = []
                st.session_state.selected_tenders = []
                st.session_state.economics_results = {}
                st.session_state.last_search_query = ""
                st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    try:
        app = TenderAnalyzerApp()
        app.run()
    except Exception as e:
        st.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        st.info("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
        logger.error(f"Critical app error: {e}")
        
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"):
            st.rerun()

if __name__ == "__main__":
    main()